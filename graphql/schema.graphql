"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Can be used as an argument to upload files using https://github.com/jaydenseric/graphql-multipart-request-spec"
scalar Upload @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Upload")

type Mutation {
    createUser(input: CreateUserInput! @spread): User
    updateUser(id: ID!, name: String, email: String, password: String): User
    deleteUser(id: ID!): DeleteResponse

    syncTicket(id: ID!,
        ticket_id: [Int!]! @rulesForArray(apply: ["exists:tickets,id", "unique:user_ticket,ticket_id"])
    ): User!

    "Upload a file that is publicly available."
    upload(file: Upload!): Image
}

type Image {
    id: ID!
    name: String!
    url: String!
    user: User
    created_at: String
    updated_at: String
}

input CreateUserInput {
    name: String! @rules(apply: ["required", "string", "min:1"])
    email: String! @rules(apply: ["required", "email", "unique:users,email"])
    password: String! @rules(apply: ["required", "min:6"])
}

type DeleteResponse {
    status: String!
    message: String!
}

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    usersAll(
      name: String @where(operator: "like")
    ): [User!]! @all

    "List multiple users."
    users(
        name: String @where(operator: "like"),
        orderBy: _ @orderBy(columns: ["id", "name", "created_at"]),
        where: _ @whereConditions(columns: ["id", "name", "email"])
    ): [User!]! @paginate(defaultCount: 5)

    post(
        "Search by primary key."
        id: ID @eq

        "Search by email address."
        title: String @eq
    ): Post @find

    posts(
        "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
        title: String @where(operator: "like")
    ): [Post!]! @paginate(defaultCount: 5)

    tickets(
        "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
        name: String @where(operator: "like")
    ): [Ticket!]! @paginate(defaultCount: 5)

    ticket(
        id: ID @eq
    ): Ticket @find

    events(
        name: String @where(operator: "like")
    ): [Event!]! @paginate(defaultCount: 5)

    event(
        id: ID @eq

        name: String @eq
    ): Event @find
}

type User {
    id: ID!
    name: String!
    email: String!
    posts: [Post!]!
    tickets: [Ticket!]
    email_verified_at: DateTime
    created_at: DateTime!
    updated_at: DateTime!
}

type Post {
    id: ID!
    title: String!
    slug: String!
    user: User!
    description: String!
    published: Boolean
    created_at: DateTime!
    updated_at: DateTime!
}

type Ticket {
    id: ID!
    events: [Event!]!
    users: [User!]!
}

type Event {
    id: ID!
    name: String
    date: DateTime
}